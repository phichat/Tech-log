<<<<<<< HEAD
(function() {
  var Declaration, GridTemplate, parser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  parser = require('postcss-value-parser');

  Declaration = require('../declaration');

  GridTemplate = (function(superClass) {
    extend(GridTemplate, superClass);

    function GridTemplate() {
      return GridTemplate.__super__.constructor.apply(this, arguments);
    }

    GridTemplate.names = ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns'];

    GridTemplate.prototype.prefixed = function(prop, prefix) {
      if (prefix === '-ms-') {
        return prefix + prop.replace('template-', '');
      } else {
        return GridTemplate.__super__.prefixed.call(this, prop, prefix);
      }
    };

    GridTemplate.prototype.normalize = function(prop) {
      return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');
    };

    GridTemplate.prototype.walkRepeat = function(node) {
      var count, first, fixed, i, j, len, ref;
      fixed = [];
      ref = node.nodes;
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.nodes) {
          this.walkRepeat(i);
        }
        fixed.push(i);
        if (i.type === 'function' && i.value === 'repeat') {
          first = i.nodes.shift();
          if (first) {
            count = first.value;
            i.nodes.shift();
            i.value = '';
            fixed.push({
              type: 'word',
              value: "[" + count + "]"
            });
          }
        }
      }
      return node.nodes = fixed;
    };

    GridTemplate.prototype.changeRepeat = function(value) {
      var ast;
      ast = parser(value);
      this.walkRepeat(ast);
      return ast.toString();
    };

    GridTemplate.prototype.set = function(decl, prefix) {
      if (prefix === '-ms-' && decl.value.indexOf('repeat(') !== -1) {
        decl.value = this.changeRepeat(decl.value);
      }
      return GridTemplate.__super__.set.call(this, decl, prefix);
    };

    return GridTemplate;

  })(Declaration);

  module.exports = GridTemplate;

}).call(this);
=======
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Declaration = require('../declaration');
var shorthand = require('./grid-shorthand');

var GridTemplate = function (_Declaration) {
    _inherits(GridTemplate, _Declaration);

    function GridTemplate() {
        _classCallCheck(this, GridTemplate);

        return _possibleConstructorReturn(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefix for unsupported value in IE
     */
    GridTemplate.prototype.check = function check(decl) {
        return decl.value.includes('/') && !decl.value.includes('[') && !decl.value.includes('"') && !decl.value.includes('\'');
    };

    /**
     * Translate grid-template to separate -ms- prefixed properties
     */


    GridTemplate.prototype.insert = function insert(decl, prefix, prefixes) {
        if (prefix !== '-ms-') return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);

        if (decl.parent.some(function (i) {
            return i.prop === '-ms-grid-rows';
        })) {
            return undefined;
        }

        var _shorthand$parseTempl = shorthand.parseTemplateShortcut(decl),
            templateRows = _shorthand$parseTempl[0],
            templateColumns = _shorthand$parseTempl[1];

        if (templateRows) {
            decl.cloneBefore({
                prop: '-ms-grid-rows',
                value: shorthand.changeRepeat(templateRows.join(''))
            });
        }

        if (templateColumns) {
            decl.cloneBefore({
                prop: '-ms-grid-columns',
                value: shorthand.changeRepeat(templateColumns.join(''))
            });
        }

        return decl;
    };

    return GridTemplate;
}(Declaration);

Object.defineProperty(GridTemplate, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-template']
});


module.exports = GridTemplate;
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
