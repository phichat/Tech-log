/**
 * `input` type prompt
 */

<<<<<<< HEAD
var util = require("util");
var chalk = require("chalk");
var Base = require("./base");
var observe = require("../utils/events");

=======
var util = require('util');
var chalk = require('chalk');
var Base = require('./base');
var observe = require('../utils/events');
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

/**
 * Module exports
 */

module.exports = Prompt;

<<<<<<< HEAD

=======
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
/**
 * Constructor
 */

function Prompt() {
<<<<<<< HEAD
  return Base.apply( this, arguments );
}
util.inherits( Prompt, Base );

=======
  return Base.apply(this, arguments);
}
util.inherits(Prompt, Base);
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

/**
 * Start the Inquiry session
 * @param  {Function} cb      Callback when prompt is done
 * @return {this}
 */

<<<<<<< HEAD
Prompt.prototype._run = function( cb ) {
=======
Prompt.prototype._run = function (cb) {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  this.done = cb;

  // Once user confirm (enter key)
  var events = observe(this.rl);
<<<<<<< HEAD
  var submit = events.line.map( this.filterInput.bind(this) );

  var validation = this.handleSubmitEvents( submit );
  validation.success.forEach( this.onEnd.bind(this) );
  validation.error.forEach( this.onError.bind(this) );

  events.keypress.takeUntil( validation.success ).forEach( this.onKeypress.bind(this) );
=======
  var submit = events.line.map(this.filterInput.bind(this));

  var validation = this.handleSubmitEvents(submit);
  validation.success.forEach(this.onEnd.bind(this));
  validation.error.forEach(this.onError.bind(this));

  events.keypress.takeUntil(validation.success).forEach(this.onKeypress.bind(this));
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

  // Init
  this.render();

  return this;
};

<<<<<<< HEAD

=======
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
/**
 * Render the prompt to screen
 * @return {Prompt} self
 */

Prompt.prototype.render = function (error) {
  var bottomContent = '';
  var message = this.getQuestion();

  if (this.status === 'answered') {
    message += chalk.cyan(this.answer);
  } else {
    message += this.rl.line;
  }

  if (error) {
    bottomContent = chalk.red('>> ') + error;
  }

  this.screen.render(message, bottomContent);
};

<<<<<<< HEAD

=======
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
/**
 * When user press `enter` key
 */

<<<<<<< HEAD
Prompt.prototype.filterInput = function( input ) {
  if ( !input ) {
    return this.opt.default != null ? this.opt.default : "";
=======
Prompt.prototype.filterInput = function (input) {
  if (!input) {
    return this.opt.default == null ? '' : this.opt.default;
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  }
  return input;
};

<<<<<<< HEAD
Prompt.prototype.onEnd = function( state ) {
  this.filter( state.value, function( filteredValue ) {
    this.answer = filteredValue;
    this.status = "answered";

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done( state.value );
  }.bind(this));
};

Prompt.prototype.onError = function( state ) {
=======
Prompt.prototype.onEnd = function (state) {
  this.answer = state.value;
  this.status = 'answered';

  // Re-render prompt
  this.render();

  this.screen.done();
  this.done(state.value);
};

Prompt.prototype.onError = function (state) {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  this.render(state.isValid);
};

/**
 * When user press a key
 */

<<<<<<< HEAD
Prompt.prototype.onKeypress = function() {
=======
Prompt.prototype.onKeypress = function () {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  this.render();
};
