'use strict';
<<<<<<< HEAD
module.exports = function (fn, errMsg) {
=======
const mimicFn = require('mimic-fn');

module.exports = (fn, opts) => {
	// TODO: Remove this in v3
	if (opts === true) {
		throw new TypeError('The second argument is now an options object');
	}

>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
	if (typeof fn !== 'function') {
		throw new TypeError('Expected a function');
	}

<<<<<<< HEAD
	var ret;
	var called = false;
	var fnName = fn.displayName || fn.name || (/function ([^\(]+)/.exec(fn.toString()) || [])[1];

	var onetime = function () {
		if (called) {
			if (errMsg === true) {
				fnName = fnName ? fnName + '()' : 'Function';
				throw new Error(fnName + ' can only be called once.');
=======
	opts = opts || {};

	let ret;
	let called = false;
	const fnName = fn.displayName || fn.name || '<anonymous>';

	const onetime = function () {
		if (called) {
			if (opts.throw === true) {
				throw new Error(`Function \`${fnName}\` can only be called once`);
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
			}

			return ret;
		}

		called = true;
		ret = fn.apply(this, arguments);
		fn = null;

		return ret;
	};

<<<<<<< HEAD
	onetime.displayName = fnName;
=======
	mimicFn(onetime, fn);
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

	return onetime;
};
