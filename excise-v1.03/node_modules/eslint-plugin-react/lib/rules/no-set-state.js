/**
 * @fileoverview Prevent usage of setState
 * @author Mark Dalgleish
 */
'use strict';

<<<<<<< HEAD
=======
var has = require('has');
var Components = require('../util/Components');

>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = {
  meta: {
    docs: {
      description: 'Prevent usage of setState',
      category: 'Stylistic Issues',
      recommended: false
    },
    schema: []
  },

<<<<<<< HEAD
  create: function(context) {
=======
  create: Components.detect(function(context, components, utils) {

    /**
     * Checks if the component is valid
     * @param {Object} component The component to process
     * @returns {Boolean} True if the component is valid, false if not.
     */
    function isValid(component) {
      return Boolean(component && !component.useSetState);
    }

    /**
     * Reports usages of setState for a given component
     * @param {Object} component The component to process
     */
    function reportSetStateUsages(component) {
      var setStateUsage;
      for (var i = 0, j = component.setStateUsages.length; i < j; i++) {
        setStateUsage = component.setStateUsages[i];
        context.report({
          node: setStateUsage,
          message: 'Do not use setState'
        });
      }
    }
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return {

      CallExpression: function(node) {
        var callee = node.callee;
<<<<<<< HEAD
        if (callee.type !== 'MemberExpression') {
          return;
        }
        if (callee.object.type !== 'ThisExpression' || callee.property.name !== 'setState') {
          return;
        }
        var ancestors = context.getAncestors(callee);
        for (var i = 0, j = ancestors.length; i < j; i++) {
          if (ancestors[i].type === 'Property' || ancestors[i].type === 'MethodDefinition') {
            context.report({
              node: callee,
              message: 'Do not use setState'
            });
            break;
          }
        }
      }
    };

  }
=======
        if (
          callee.type !== 'MemberExpression' ||
          callee.object.type !== 'ThisExpression' ||
          callee.property.name !== 'setState'
        ) {
          return;
        }
        var component = components.get(utils.getParentComponent());
        var setStateUsages = component && component.setStateUsages || [];
        setStateUsages.push(callee);
        components.set(node, {
          useSetState: true,
          setStateUsages: setStateUsages
        });
      },

      'Program:exit': function() {
        var list = components.list();
        for (var component in list) {
          if (!has(list, component) || isValid(list[component])) {
            continue;
          }
          reportSetStateUsages(list[component]);
        }
      }
    };
  })
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
};
