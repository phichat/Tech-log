<<<<<<< HEAD
(function() {
  var brackets, last;

  last = function(array) {
    return array[array.length - 1];
  };

  brackets = {
    parse: function(str) {
      var current, j, len, stack, sym;
      current = [''];
      stack = [current];
      for (j = 0, len = str.length; j < len; j++) {
        sym = str[j];
        if (sym === '(') {
          current = [''];
          last(stack).push(current);
          stack.push(current);
        } else if (sym === ')') {
          stack.pop();
          current = last(stack);
          current.push('');
        } else {
          current[current.length - 1] += sym;
        }
      }
      return stack[0];
    },
    stringify: function(ast) {
      var i, j, len, result;
      result = '';
      for (j = 0, len = ast.length; j < len; j++) {
        i = ast[j];
        if (typeof i === 'object') {
          result += '(' + brackets.stringify(i) + ')';
        } else {
          result += i;
        }
      }
      return result;
    }
  };

  module.exports = brackets;

}).call(this);
=======
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var last = function last(array) {
    return array[array.length - 1];
};

var brackets = {

    /**
     * Parse string to nodes tree
     */
    parse: function parse(str) {
        var current = [''];
        var stack = [current];

        for (var i = 0; i < str.length; i++) {
            var sym = str[i];
            if (sym === '(') {
                current = [''];
                last(stack).push(current);
                stack.push(current);
                continue;
            }

            if (sym === ')') {
                stack.pop();
                current = last(stack);
                current.push('');
                continue;
            }

            current[current.length - 1] += sym;
        }

        return stack[0];
    },


    /**
     * Generate output string by nodes tree
     */
    stringify: function stringify(ast) {
        var result = '';
        for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var i = _ref;

            if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object') {
                result += '(' + brackets.stringify(i) + ')';
                continue;
            }

            result += i;
        }
        return result;
    }
};

module.exports = brackets;
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
