<<<<<<< HEAD
import {
  dom,
  roles,
} from 'aria-query';
import { getProp, getLiteralPropValue } from 'jsx-ast-utils';

const VALID_ROLES = [...roles.keys()]
  .filter(role => roles.get(role).interactive === true);
=======
// @flow
import {
  roles as rolesMap,
} from 'aria-query';
import type { Node } from 'ast-types-flow';
import { getProp, getLiteralPropValue } from 'jsx-ast-utils';
import includes from 'array-includes';

const roles = [...rolesMap.keys()];
const interactiveRoles = roles
  .filter(name => !rolesMap.get(name).abstract)
  .filter(name => rolesMap.get(name).superClass.some(
    klasses => includes(klasses, 'widget')),
  );

// 'toolbar' does not descend from widget, but it does support
// aria-activedescendant, thus in practice we treat it as a widget.
interactiveRoles.push('toolbar');
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
/**
 * Returns boolean indicating whether the given element has a role
 * that is associated with an interactive component. Used when an element
 * has a dynamic handler on it and we need to discern whether or not
 * its intention is to be interacted with in the DOM.
 *
 * isInteractiveRole is a Logical Disjunction:
 * https://en.wikipedia.org/wiki/Logical_disjunction
 * The JSX element does not have a tagName or it has a tagName and a role
 * attribute with a value in the set of non-interactive roles.
 */
<<<<<<< HEAD
const isInteractiveRole = (tagName, attributes) => {
  // Do not test higher level JSX components, as we do not know what
  // low-level DOM element this maps to.
  if ([...dom.keys()].indexOf(tagName) === -1) {
    return true;
  }

=======
const isInteractiveRole = (
  tagName: string,
  attributes: Array<Node>,
): boolean => {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  const value = getLiteralPropValue(getProp(attributes, 'role'));

  // If value is undefined, then the role attribute will be dropped in the DOM.
  // If value is null, then getLiteralAttributeValue is telling us that the
  // value isn't in the form of a literal
  if (value === undefined || value === null) {
    return false;
  }

<<<<<<< HEAD
  const normalizedValues = String(value).toLowerCase().split(' ');
  const isInteractive = normalizedValues.every(
    val => VALID_ROLES.indexOf(val) > -1,
  );
=======
  let isInteractive = false;
  const normalizedValues = String(value).toLowerCase().split(' ');
  const validRoles = normalizedValues.reduce((
    accumulator: Array<string>,
    name: string,
  ) => {
    if (includes(roles, name)) {
      accumulator.push(name);
    }
    return accumulator;
  }, []);
  if (validRoles.length > 0) {
    // The first role value is a series takes precedence.
    isInteractive = includes(interactiveRoles, validRoles[0]);
  }
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

  return isInteractive;
};

export default isInteractiveRole;
