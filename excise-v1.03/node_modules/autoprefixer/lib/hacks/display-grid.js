<<<<<<< HEAD
(function() {
  var DisplayGrid, OldValue, Value, flexSpec,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  flexSpec = require('./flex-spec');

  OldValue = require('../old-value');

  Value = require('../value');

  DisplayGrid = (function(superClass) {
    extend(DisplayGrid, superClass);

    DisplayGrid.names = ['display-grid', 'inline-grid'];

    function DisplayGrid(name, prefixes) {
      DisplayGrid.__super__.constructor.apply(this, arguments);
      if (name === 'display-grid') {
        this.name = 'grid';
      }
    }

    DisplayGrid.prototype.check = function(decl) {
      return decl.prop === 'display' && decl.value === this.name;
    };

    return DisplayGrid;

  })(Value);

  module.exports = DisplayGrid;

}).call(this);
=======
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Value = require('../value');

var DisplayGrid = function (_Value) {
    _inherits(DisplayGrid, _Value);

    function DisplayGrid(name, prefixes) {
        _classCallCheck(this, DisplayGrid);

        var _this = _possibleConstructorReturn(this, _Value.call(this, name, prefixes));

        if (name === 'display-grid') {
            _this.name = 'grid';
        }
        return _this;
    }

    /**
     * Faster check for flex value
     */


    DisplayGrid.prototype.check = function check(decl) {
        return decl.prop === 'display' && decl.value === this.name;
    };

    return DisplayGrid;
}(Value);

Object.defineProperty(DisplayGrid, 'names', {
    enumerable: true,
    writable: true,
    value: ['display-grid', 'inline-grid']
});


module.exports = DisplayGrid;
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
