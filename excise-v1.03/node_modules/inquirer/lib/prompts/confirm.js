/**
 * `confirm` type prompt
 */

<<<<<<< HEAD
var _ = require("lodash");
var util = require("util");
var chalk = require("chalk");
var Base = require("./base");
var observe = require("../utils/events");

=======
var _ = require('lodash');
var util = require('util');
var chalk = require('chalk');
var Base = require('./base');
var observe = require('../utils/events');
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

/**
 * Module exports
 */

module.exports = Prompt;

<<<<<<< HEAD

=======
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
/**
 * Constructor
 */

function Prompt() {
<<<<<<< HEAD
  Base.apply( this, arguments );

  var rawDefault = true;

  _.extend( this.opt, {
    filter: function( input ) {
      var value = rawDefault;
      if ( input != null && input !== "" ) {
        value = /^y(es)?/i.test(input);
      }
      return value;
    }.bind(this)
  });

  if ( _.isBoolean(this.opt.default) ) {
    rawDefault = this.opt.default;
  }

  this.opt.default = rawDefault ? "Y/n" : "y/N";

  return this;
}
util.inherits( Prompt, Base );

=======
  Base.apply(this, arguments);

  var rawDefault = true;

  _.extend(this.opt, {
    filter: function (input) {
      var value = rawDefault;
      if (input != null && input !== '') {
        value = /^y(es)?/i.test(input);
      }
      return value;
    }
  });

  if (_.isBoolean(this.opt.default)) {
    rawDefault = this.opt.default;
  }

  this.opt.default = rawDefault ? 'Y/n' : 'y/N';

  return this;
}
util.inherits(Prompt, Base);
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

/**
 * Start the Inquiry session
 * @param  {Function} cb   Callback when prompt is done
 * @return {this}
 */

<<<<<<< HEAD
Prompt.prototype._run = function( cb ) {
=======
Prompt.prototype._run = function (cb) {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  this.done = cb;

  // Once user confirm (enter key)
  var events = observe(this.rl);
<<<<<<< HEAD
  events.keypress.takeUntil( events.line ).forEach( this.onKeypress.bind(this) );

  events.line.take(1).forEach( this.onEnd.bind(this) );
=======
  events.keypress.takeUntil(events.line).forEach(this.onKeypress.bind(this));

  events.line.take(1).forEach(this.onEnd.bind(this));
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2

  // Init
  this.render();

  return this;
};

<<<<<<< HEAD

=======
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
/**
 * Render the prompt to screen
 * @return {Prompt} self
 */

Prompt.prototype.render = function (answer) {
  var message = this.getQuestion();

<<<<<<< HEAD
  if (typeof answer === "boolean") {
    message += chalk.cyan(answer ? "Yes" : "No");
=======
  if (typeof answer === 'boolean') {
    message += chalk.cyan(answer ? 'Yes' : 'No');
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  } else {
    message += this.rl.line;
  }

  this.screen.render(message);

  return this;
};

/**
 * When user press `enter` key
 */

<<<<<<< HEAD
Prompt.prototype.onEnd = function( input ) {
  this.status = "answered";

  var output = this.opt.filter( input );
  this.render( output );

  this.screen.done();
  this.done( input ); // send "input" because the master class will refilter
=======
Prompt.prototype.onEnd = function (input) {
  this.status = 'answered';

  var output = this.opt.filter(input);
  this.render(output);

  this.screen.done();
  this.done(output);
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
};

/**
 * When user press a key
 */

<<<<<<< HEAD
Prompt.prototype.onKeypress = function() {
    this.render();
=======
Prompt.prototype.onKeypress = function () {
  this.render();
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
};
