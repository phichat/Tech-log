/* eslint-env mocha */
import expect from 'expect';
<<<<<<< HEAD
import { elementType, getProp, getLiteralPropValue } from 'jsx-ast-utils';
import isInteractiveRole from '../../../src/util/isInteractiveRole';
import {
=======
import { elementType } from 'jsx-ast-utils';
import isInteractiveRole from '../../../src/util/isInteractiveRole';
import {
  genElementSymbol,
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  genInteractiveRoleElements,
  genNonInteractiveRoleElements,
} from '../../../__mocks__/genInteractives';

describe('isInteractiveRole', () => {
  describe('JSX Components (no tagName)', () => {
    it('should identify them as interactive role elements', () => {
      expect(isInteractiveRole(undefined, []))
<<<<<<< HEAD
        .toBe(true);
=======
        .toBe(false);
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
    });
  });
  describe('elements with a non-interactive role', () => {
    genNonInteractiveRoleElements().forEach(
      ({ openingElement }) => {
        const attributes = openingElement.attributes;
<<<<<<< HEAD
        const role = getLiteralPropValue(getProp(attributes, 'role')).toLowerCase();
        it(`should not identify \`${role}\` as an interactive role element`, () => {
=======
        it(`should not identify \`${genElementSymbol(openingElement)}\` as an interactive role element`, () => {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
          expect(isInteractiveRole(
            elementType(openingElement),
            attributes,
          )).toBe(false);
        });
      },
    );
  });
  describe('elements without a role', () => {
    it('should not identify them as interactive role elements', () => {
      expect(isInteractiveRole('div', [])).toBe(false);
    });
  });
  describe('elements with an interactive role', () => {
    genInteractiveRoleElements().forEach(
      ({ openingElement }) => {
        const attributes = openingElement.attributes;
<<<<<<< HEAD
        const role = getLiteralPropValue(getProp(attributes, 'role')).toLowerCase();
        it(`should identify \`${role}\` as an interactive role element`, () => {
=======
        it(`should identify \`${genElementSymbol(openingElement)}\` as an interactive role element`, () => {
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
          expect(isInteractiveRole(
            elementType(openingElement),
            attributes,
          )).toBe(true);
        });
      },
    );
  });
});
