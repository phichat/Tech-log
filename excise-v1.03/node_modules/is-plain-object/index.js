/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
<<<<<<< HEAD
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
=======
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
 */

'use strict';

var isObject = require('isobject');

function isObjectObject(o) {
  return isObject(o) === true
    && Object.prototype.toString.call(o) === '[object Object]';
}

module.exports = function isPlainObject(o) {
  var ctor,prot;
<<<<<<< HEAD
  
  if (isObjectObject(o) === false) return false;
  
  // If has modified constructor
  ctor = o.constructor;
  if (typeof ctor !== 'function') return false;
  
  // If has modified prototype
  prot = ctor.prototype;
  if (isObjectObject(prot) === false) return false;
  
=======

  if (isObjectObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (typeof ctor !== 'function') return false;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObjectObject(prot) === false) return false;

>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }
<<<<<<< HEAD
  
=======

>>>>>>> 09665636ba9818fc952cd8bfe693d791912356d2
  // Most likely a plain Object
  return true;
};
